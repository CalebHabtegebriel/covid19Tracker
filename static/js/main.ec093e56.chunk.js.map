{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrinStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ec093e56.chunk.js","sourcesContent":["import React from 'react';\nimport \"./InfoBox.css\"\nimport { Card, CardContent, Typography} from '@material-ui/core';\nfunction InfoBox({ title, cases, isRed, active, total, ...props }) {\n    return (\n   \n            <Card onClick={props.onClick} className={`infoBox ${active && \"infoBox--selected\"} ${isRed && \"infoBox--red\"}`} >\n                <CardContent >\n                    <Typography className=\"infoBoix_title\" color=\"textSecondary\">\n                        {title}\n                    </Typography>\n\n                    <h2 className={`infoBox_cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\n\n                    <Typography className=\"infoBox_total\" color=\"textSecondary\">\n                        {total} Total\n                    </Typography>\n                </CardContent>\n            </Card>\n       \n    );\n}\n\nexport default InfoBox;\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n    cases: {\n        hex: '#CC1034',\n        rgb: \"rgb(204,16,52)\",\n        half_op: \"rgba(204, 16,52, 0.5)\",\n        multiplier: 800,\n    },\n    recovered: {\n        hex: '#7dd71d',\n        rgb: \"rgb(125,215,29)\",\n        half_op: \"rgba(125, 215,29, 0.5)\",\n        multiplier: 1200,\n    },\n    deaths: {\n        hex: '#fb443',\n        rgb: \"rgb(251,68,67)\",\n        half_op: \"rgba(251, 68,67, 0.5)\",\n        multiplier: 2000,\n    },\n};\n\nexport const sortData = (data) => {\n    const sortedData = [...data];\n\n    return sortedData.sort((a,b) => (a.cases > b.cases ? -1 : 1))\n};\n\nexport const prettyPrinStat = (stat) => \n    stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\nexport const showDataOnMap = (data, casesType='cases') => (\n    data.map(country => (\n        <Circle center={[country.countryInfo.lat, country.countryInfo.long]} \n        fillOpacity={0.4}\n        color={casesTypeColors[casesType].hex}\n        fillColor={casesTypeColors[casesType].hex}\n        radius={Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier}>\n            <Popup>\n                <div className=\"info-container\"> \n                    <div className=\"info-flag\" style ={{ backgroundImage: `url(${country.countryInfo.flag})`}}/>\n                    <div className=\"info-name\">{country.country}</div>\n                    <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\n                    <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\n                    <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\n                </div>\n            </Popup>\n        </Circle>\n    ))\n);","import React from 'react';\nimport \"./Map.css\";\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport { showDataOnMap } from './util';\nfunction Map({ countries, casesType, center, zoom }) {\n    return (\n        <div className=\"map\">\n            <LeafletMap center={center} zoom={zoom}>\n                <TileLayer \n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreet Map</a> contributors'\n                />\n                {/*Loop throught countries and draw circles on the screen */}\n                {showDataOnMap(countries, casesType)}\n            </LeafletMap>\n        </div>\n    )\n}\n\nexport default Map;\n","import React from 'react'\nimport numeral from \"numeral\";\nfunction Table({ countries }) {\n    return (\n        <div className=\"table\">\n            {countries.map(({ country, cases }) => (\n                <tr>\n                    <td>{country}</td>\n                    <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\n                </tr>\n\n            ))}\n        </div>\n    );\n}\n\nexport default Table;","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from 'numeral';\n\nconst options = {\n   legend: {\n       display: false,\n   },\n   elements: {\n       point: {\n           radius: 0,\n       },\n   }, \n   maintainAspectRatio: false,\n   tooltips: {\n       mode: 'index',\n       intersect: false,\n       callbacks: {\n           label: function (tooltipItem, data){\n               return numeral(tooltipItem.value).format(\"+0,0\");\n           }\n       }\n   },\n   scales: {\n       xAxes: [\n           {\n               type: \"time\",\n               time: {\n                   format: \"MM/DD/YY\",\n                   tooltipFormat: \"ll\",\n               },\n           },\n        ],\n        yAxes: [\n            {\n                gridLines: {\n                    display: false,\n\n                },\n                ticks: {\n                    callback: function(value, index, values) {\n                        return numeral(value).format(\"0a\");\n                    },\n\n                },\n            }],\n        },\n    };\n\nconst buildChartData = (data, casesType='cases') => {\n    const chartData = [];\n    let lastDataPoint;\n\n    for(let date in data.cases) {\n        if(lastDataPoint) {\n            const newDataPoint = {\n                x : date,\n                y : data[casesType][date] - lastDataPoint\n            }\n            chartData.push(newDataPoint);\n        }\n        lastDataPoint = data[casesType][date];\n    }\n        return chartData;\n        \n};\n\nfunction LineGraph({casesType = \"cases\", ...props}) {\n    const [data, setData] = useState({});\n\n\n    useEffect(() => {\n        const fetchData = async () => {\n            await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\n            .then(response => response.json())\n            .then(data => {\n    \n                let chartData = buildChartData(data, casesType );\n                setData(chartData);\n    \n            });\n        };\n            fetchData();\n\n    }, [casesType]);\n\n    return (\n        <div className={props.className}>\n            {data?.length > 0 && (\n\n            <Line \n                options={options}\n                data={{\n                datasets: [\n                    {\n                        backgroundColor: \"rgba(204, 16, 52, 0.8)\",\n                        borderColor: \"#CC1034\",\n                        data: data,\n                    }\n                ]\n            }}/>\n            )}\n            \n        </div>\n    )\n}\n\nexport default LineGraph\n","import React, { useState, useEffect } from 'react';\nimport { MenuItem, FormControl, Select, Card, CardContent} from \"@material-ui/core\";\nimport InfoBox  from './InfoBox.js';\nimport Map from './Map.js'\nimport Table from './Table';\nimport './Table.css';\nimport './App.css';\nimport { sortData, prettyPrinStat } from './util';\nimport LineGraph from './LineGraph';\nimport \"leaflet/dist/leaflet.css\";\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide'); \n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796});\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  \n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response => response.json())\n    .then(data => {\n      setCountryInfo(data);\n    });\n  }, []);\n\n  // STATE = How to write a variable in REACT \n  // USEEFFECT = runs a piece of code based on a give n condition\n  useEffect(() => {\n      // the code inside here will run once when the component loads and not again\n      // async -> send a request, wait for it, do something with info\n      const getCountriesData = async () => {\n        await fetch (\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country, // United States, United Kingdom\n            value: country.countryInfo.iso2 ,// UK, USA, FR\n\n          }));\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n        });\n      };\n      getCountriesData();\n      \n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n\n    const url = countryCode === \"worldwide\"\n     ? \"https://disease.sh/v3/covid-19/all\"\n     : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n  //https://disease.sh/v3/covid-19/countries/[Country]\n    //https://disease.sh/v3/covid-19/countries/[Country]\n    await fetch(url)\n      .then(response => response.json())\n      .then((data) => {\n\n        setCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n        //all of the data from the country response\n        \n      });\n\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app_left\">\n\n        <div className=\"app_header\">\n\n          <h1>COVID-19 TRACKER</h1>\n\n          <FormControl className=\"app_dropdown\">\n\n            <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {/* Loop throught all the countries and show a drop down list of all the countries */}\n              {countries.map((country)=> (<MenuItem value={country.value}>{country.name}</MenuItem>))}\n            </Select>\n\n          </FormControl>\n\n        </div>\n\n\n        <div className=\"app_stats\">\n\n        <InfoBox isRed active={casesType=== \"cases\"} onClick={(e) => setCasesType('cases')} title=\"Coronavirus Cases\" cases={prettyPrinStat(countryInfo.todayCases)} total={prettyPrinStat(countryInfo.cases)}/>\n        <InfoBox active={casesType=== \"recovered\"} onClick={(e) => setCasesType('recovered')}  title=\"Recovered\" cases={prettyPrinStat(countryInfo.todayRecovered)} total={prettyPrinStat(countryInfo.recovered)} />\n        <InfoBox isRed active={casesType=== \"deaths\"} onClick={(e) => setCasesType('deaths')} title=\"Deaths\"  cases={prettyPrinStat(countryInfo.todayDeaths)} total={prettyPrinStat(countryInfo.deaths)}/>\n        </div>\n\n        \n\n        {/* Map */}\n        <Map casesType={casesType} countries={mapCountries} center={mapCenter} zoom={mapZoom}/>\n\n      </div>\n      <Card className=\"app_right\">\n\n          \n          <CardContent>\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n            <h3 className=\"app_graphTitle\"> WorldWide new {casesType}</h3>\n          </CardContent>\n          <LineGraph className=\"app_graph\" casesType={casesType} />\n\n        </Card>\n\n      </div>\n      \n        \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}